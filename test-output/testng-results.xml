<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="11" passed="11" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-12-13T09:30:06 IST" name="Default suite" finished-at="2020-12-13T09:30:06 IST" duration-ms="70">
    <groups>
    </groups>
    <test started-at="2020-12-13T09:30:06 IST" name="Default test" finished-at="2020-12-13T09:30:06 IST" duration-ms="70">
      <class name="test.TestStringCalculator">
        <test-method is-config="true" signature="init()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="init" finished-at="2020-12-13T09:30:06 IST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method signature="countAddMethodInvoked()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="countAddMethodInvoked" finished-at="2020-12-13T09:30:06 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- countAddMethodInvoked -->
        <test-method signature="emptyStringReturnZero()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="emptyStringReturnZero" finished-at="2020-12-13T09:30:06 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- emptyStringReturnZero -->
        <test-method signature="ignoreNumberGreaterThan1000()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="ignoreNumberGreaterThan1000" finished-at="2020-12-13T09:30:06 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ignoreNumberGreaterThan1000 -->
        <test-method signature="multipleNegativeInputReturnsException()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="multipleNegativeInputReturnsException" finished-at="2020-12-13T09:30:06 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- multipleNegativeInputReturnsException -->
        <test-method signature="negativeInputReturnsException()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="negativeInputReturnsException" finished-at="2020-12-13T09:30:06 IST" duration-ms="1" status="PASS">
          <exception class="java.lang.RuntimeException">
            <message>
              <![CDATA[Negatives not allowed: [-1]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: Negatives not allowed: [-1]
at main.StringCalculator.findDangerousInput(StringCalculator.java:73)
at main.StringCalculator.Add(StringCalculator.java:44)
at main.StringCalculator.Add(StringCalculator.java:31)
at test.TestStringCalculator.negativeInputReturnsException(TestStringCalculator.java:44)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1507)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.RuntimeException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- negativeInputReturnsException -->
        <test-method signature="oneNumberReturnValue()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="oneNumberReturnValue" finished-at="2020-12-13T09:30:06 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- oneNumberReturnValue -->
        <test-method signature="twoNumbersCommaDelimitedReturnSum()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="twoNumbersCommaDelimitedReturnSum" finished-at="2020-12-13T09:30:06 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoNumbersCommaDelimitedReturnSum -->
        <test-method signature="twoNumbersNewLineDelimitedReturnSum()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="twoNumbersNewLineDelimitedReturnSum" finished-at="2020-12-13T09:30:06 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- twoNumbersNewLineDelimitedReturnSum -->
        <test-method signature="unknownAmountNumbersReturnSum()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="unknownAmountNumbersReturnSum" finished-at="2020-12-13T09:30:06 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- unknownAmountNumbersReturnSum -->
        <test-method signature="whenDelimiterIsSpecifiedThenItIsUsedToSeparateNumbers()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="whenDelimiterIsSpecifiedThenItIsUsedToSeparateNumbers" finished-at="2020-12-13T09:30:06 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenDelimiterIsSpecifiedThenItIsUsedToSeparateNumbers -->
        <test-method signature="whenMultipleDelimitersAreSpecified()[pri:0, instance:test.TestStringCalculator@184cf7cf]" started-at="2020-12-13T09:30:06 IST" name="whenMultipleDelimitersAreSpecified" finished-at="2020-12-13T09:30:06 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenMultipleDelimitersAreSpecified -->
      </class> <!-- test.TestStringCalculator -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
